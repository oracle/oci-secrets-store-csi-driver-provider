/*
Copyright 2022 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: provider/v1alpha1/service.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CSIDriverProviderClient is the client API for CSIDriverProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSIDriverProviderClient interface {
	// Version returns the runtime name and runtime version of the Secrets Store CSI Driver Provider
	// TODO (aramase) This will be used later to ensure the provider the driver is talking to supports
	// the current version
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// Execute mount operation in provider
	Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountResponse, error)
}

type cSIDriverProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewCSIDriverProviderClient(cc grpc.ClientConnInterface) CSIDriverProviderClient {
	return &cSIDriverProviderClient{cc}
}

func (c *cSIDriverProviderClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.CSIDriverProvider/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSIDriverProviderClient) Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountResponse, error) {
	out := new(MountResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.CSIDriverProvider/Mount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSIDriverProviderServer is the server API for CSIDriverProvider service.
// All implementations should embed UnimplementedCSIDriverProviderServer
// for forward compatibility
type CSIDriverProviderServer interface {
	// Version returns the runtime name and runtime version of the Secrets Store CSI Driver Provider
	// TODO (aramase) This will be used later to ensure the provider the driver is talking to supports
	// the current version
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// Execute mount operation in provider
	Mount(context.Context, *MountRequest) (*MountResponse, error)
}

// UnimplementedCSIDriverProviderServer should be embedded to have forward compatible implementations.
type UnimplementedCSIDriverProviderServer struct {
}

func (UnimplementedCSIDriverProviderServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedCSIDriverProviderServer) Mount(context.Context, *MountRequest) (*MountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mount not implemented")
}

// UnsafeCSIDriverProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSIDriverProviderServer will
// result in compilation errors.
type UnsafeCSIDriverProviderServer interface {
	mustEmbedUnimplementedCSIDriverProviderServer()
}

func RegisterCSIDriverProviderServer(s grpc.ServiceRegistrar, srv CSIDriverProviderServer) {
	s.RegisterService(&CSIDriverProvider_ServiceDesc, srv)
}

func _CSIDriverProvider_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIDriverProviderServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.CSIDriverProvider/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIDriverProviderServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSIDriverProvider_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSIDriverProviderServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.CSIDriverProvider/Mount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSIDriverProviderServer).Mount(ctx, req.(*MountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CSIDriverProvider_ServiceDesc is the grpc.ServiceDesc for CSIDriverProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CSIDriverProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.CSIDriverProvider",
	HandlerType: (*CSIDriverProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _CSIDriverProvider_Version_Handler,
		},
		{
			MethodName: "Mount",
			Handler:    _CSIDriverProvider_Mount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provider/v1alpha1/service.proto",
}
